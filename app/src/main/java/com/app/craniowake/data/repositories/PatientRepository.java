package com.app.craniowake.data.repositories;

import android.app.Application;
import android.os.AsyncTask;

import androidx.lifecycle.LiveData;

import com.app.craniowake.data.dao.PatientDao;
import com.app.craniowake.data.db.CraniowakeDatabase;
import com.app.craniowake.data.model.Patient;

import java.util.List;

/**
 * handles all data operations for the patient model and dao.
 * Provides a clean API so that the rest of the app can retrieve this data.
 * It abstracts the data sources from the rest of the app.
 */
public class PatientRepository {
    private final PatientDao patientDao;
    private final LiveData<List<Patient>> allPatients;

    public PatientRepository(Application application) {
        CraniowakeDatabase craniowakeDatabase = CraniowakeDatabase.getInstance(application);
        patientDao = craniowakeDatabase.patientDao();
        allPatients = patientDao.getAllPatients();
    }

    /**
     * returns LiveData of the given patient by id
     *
     * @param id is an autogenerated identifier for patients
     */
    public LiveData<Patient> getPatientById(long id) {
        return patientDao.getById(id);
    }

    /**
     * insert calls AsyncTask to handle background thread
     *
     * @param patient objekt to be saved in database
     */
    public void insert(Patient patient) {
        new AddPatientAsyncTask(patientDao).execute(patient);
    }

    public void delete(Patient patient) { new DeletePatientAsyncTask(patientDao).execute(patient); }

    /**
     * returns LiveData List of all existing patients in the database
     */
    public LiveData<List<Patient>> getAllPatients() {
        return allPatients;
    }

    private static class AddPatientAsyncTask extends AsyncTask<Patient, Void, Void> {
        private final PatientDao patientDao;

        private AddPatientAsyncTask(PatientDao patientDao) {
            this.patientDao = patientDao;
        }

        @Override
        protected Void doInBackground(Patient... patients) {
            try {
                patientDao.addPatient(patients[0]);
                return null;
            } catch (Exception e) {
                System.out.println("error");
            }
            return null;
        }
    }

    private static class DeletePatientAsyncTask extends AsyncTask<Patient, Void, Void> {
        private final PatientDao patientDao;

        private DeletePatientAsyncTask(PatientDao patientDao) {
            this.patientDao = patientDao;
        }

        @Override
        protected Void doInBackground(Patient... patients) {
            try {
                patientDao.deletePatients(patients);
                return null;
            } catch (Exception e) {
                System.out.println("error");
            }
            return null;
        }
    }
}
